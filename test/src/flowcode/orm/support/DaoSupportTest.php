<?php

namespace flowcode\orm\support;

use flowcode\inter\domain\Barrio;
use flowcode\inter\domain\Noticia;
use flowcode\inter\domain\Penia;
use flowcode\inter\domain\Poll;
use flowcode\inter\domain\PollOption;
use flowcode\mvc\kernel\DataSource;

require_once dirname(__FILE__) . '/../../../../../src/flowcode/mvc/kernel/Autoloader.class.php';
require_once dirname(__FILE__) . '/../../../../../src/flowcode/orm/support/DaoSupport.class.php';

/**
 * Test class for DaoSupport.
 * Generated by PHPUnit on 2012-09-07 at 18:25:59.
 */
class DaoSupportTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var DaoSupport
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new DaoSupport();
        $dataSource = new DataSource();
        $this->object->setDataSource($dataSource);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers flowcode\orm\support\DaoSupport::save
     * @todo Implement testSave().
     */
    public function testSave() {
        $barrio = new Barrio();
        $barrio->setId(9);
        $barrio->setDescripcion("descripcion");
        $barrio->setNombre("juancho");
        $barrio->setTexto("texto");
        $barrio->setLogo("logo");
        $barrio->setMapa("mapa");

        //$this->object->save($barrio);
    }

    /**
     * 
     */
    public function testSave_entityWithRelations() {
        $noticia = new Noticia();

        $pen1 = new Penia();
        $pen1->setId(3);
        $penias[] = $pen1;
        $noticia->setPenias($penias);

        $this->object->save($noticia);
    }

    /**
     * @covers flowcode\orm\support\DaoSupport::getDataSource
     * @todo Implement testGetDataSource().
     */
    public function testGetDataSource() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers flowcode\orm\support\DaoSupport::setDataSource
     * @todo Implement testSetDataSource().
     */
    public function testSetDataSource() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers flowcode\orm\support\DaoSupport::buildInsertQuery 
     */
    public function testBuildInsertQuery() {
        $barrio = new Barrio();
        $barrio->setDescripcion("descripcion");
        $barrio->setNombre("nombre");
        $barrio->setTexto("texto");
        $barrio->setLogo("logo");
        $barrio->setMapa("mapa");

        $expected = "INSERT INTO `barrio` (`nombre`, `descripcion`, `texto`, `logo`, `mapa`) VALUES ('nombre', 'descripcion', 'texto', 'logo', 'mapa');";
        $buildedQuery = $this->object->buildInsertQuery($barrio);

        $this->assertEquals($expected, $buildedQuery);
    }

    /**
     * @covers flowcode\orm\support\DaoSupport::buildUpdateQuery
     */
    public function testBuildUpdateQuery() {
        $barrio = new Barrio();
        $barrio->setId(12);
        $barrio->setDescripcion("descripcion");
        $barrio->setNombre("nombre");
        $barrio->setTexto("texto");
        $barrio->setLogo("logo");
        $barrio->setMapa("mapa");

        $expected = "UPDATE `barrio` SET `nombre`='nombre', `descripcion`='descripcion', `texto`='texto', `logo`='logo', `mapa`='mapa' WHERE id='12'";
        $buildedQuery = $this->object->buildUpdateQuery($barrio);

        $this->assertEquals($expected, $buildedQuery);
    }

    public function testbuildRelationQuery() {
        $noticia = new Noticia();
        $noticia->setId(1);

        $pen1 = new Penia();
        $pen1->setId(3);
        $penias[] = $pen1;
        $noticia->setPenias($penias);

        $expected = "INSERT INTO noticia_penia (id_noticia, id_penia) VALUES ('1', '3');";

        $buildedQuery = $this->object->buildRelationQuery($noticia);

        $this->assertEquals($expected, $buildedQuery);
    }

    public function testbuildRelationQuery_entityWithoutRelations() {
        $barrio = new Barrio();
        $barrio->setId(12);
        $barrio->setDescripcion("descripcion");
        $barrio->setNombre("nombre");
        $barrio->setTexto("texto");
        $barrio->setLogo("logo");
        $barrio->setMapa("mapa");

        $expected = "";

        $buildedQuery = $this->object->buildRelationQuery($barrio);

        $this->assertEquals($expected, $buildedQuery);
    }

    public function testbuildRelationQuery_entityWithOneToManyRelations() {
        $instance = new Poll();
        //$instance->setId(1);

        $op1 = new PollOption();
        $op1->setName("hola");
        $options[] = $op1;
        $op1 = new PollOption();
        $op1->setName("chau");
        $options[] = $op1;

        $instance->setOptions($options);

        $expected = "INSERT INTO `poll_option` (`name`, `id_poll`) VALUES ('hola', '12');";
        $expected .= "INSERT INTO `poll_option` (`name`, `id_poll`) VALUES ('chau', '12');";

        $buildedQuery = $this->object->buildRelationQuery($instance);
        $this->object->save($instance);

        $this->assertEquals($expected, $buildedQuery);
    }

    /**
     * @covers flowcode\orm\support\DaoSupport::buildUpdateQuery
     */
    public function testFindAll() {
        $barrio = new Barrio();
        $barrios = $this->object->findAll($barrio);

        $this->assertGreaterThan(0, count($barrios));
    }

    public function testFindById() {
        $barrio = new Barrio();
        $id = 1;
        $barrioFounded = $this->object->findById(get_class($barrio), $id);

        $this->assertEquals($id, $barrioFounded->getId());
    }

    public function testFindById_entityWithManyToManyRelations() {
        $instance = new Noticia();
        $id = 93;
        $foundedInstance = $this->object->findById(get_class($instance), $id);

        $this->assertEquals($id, $foundedInstance->getId());

        $this->assertEquals(2, count($foundedInstance->getPenias()));

        $penias = $foundedInstance->getPenias();
        $penia = $penias[0];
        $this->assertEquals(2, $penia->getId());
    }

    public function testFindById_entityWithOneToManyRelations() {
//        $instance = new \flowcode\inter\domain\Poll();
//        $id = 8;
//        $foundedInstance = $this->object->findById(get_class($instance), $id);
//
//        $this->assertEquals($id, $foundedInstance->getId());
//        
//        $this->assertEquals(7, count($foundedInstance->getOptions()));
//        
//        $penias = $foundedInstance->getOptions();
//        $penia = $penias[0];
//        $this->assertEquals(1, $penia->getId());
    }

    public function testSave_modifiedEntity() {
        $entity = new Poll();
        $entity->setId("29");
        $entity->setName("tests");

        $op1 = new PollOption();
        $op1->setId("1");
        $op1->setIdPoll("29");
        $op1->setName("holas");
        $options[] = $op1;

        $op2 = new PollOption();
        $op2->setId("2");
        $op1->setIdPoll("29");
        $op2->setName("chau");
        $options[] = $op2;

        $entity->setOptions($options);

        //$w = $this->object->buildUpdateQuery($entity);
        //echo $w;

        $this->object->save($entity);
    }

}

?>
