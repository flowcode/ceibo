<?php

namespace flowcode\orm;

use flowcode\demo\domain\Ovni;
use flowcode\demo\domain\Poll;
use flowcode\demo\domain\PollOption;
use flowcode\demo\domain\Weapon;
use flowcode\orm\EntityManager;

/**
 * Test class for EntityManager.
 * Generated by PHPUnit on 2012-10-22 at 12:55:45.
 */
class EntityManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var EntityManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = EntityManager::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers flowcode\orm\support\DaoSupport::buildInsertQuery 
     */
    public function testBuildInsertQuery_manyToMany_testOk() {
        $ovni = new Ovni();
        $ovni->setName("martian");

        $weapon1 = new Weapon(1, "lazer");
        $weapon2 = new Weapon(2, "rifle");

        $ovni->addWeapon($weapon1);
        $ovni->addWeapon($weapon2);

        $expected = "INSERT INTO `ovni` (`name`) VALUES ('martian');";
        $buildedQuery = $this->object->buildInsertQuery($ovni);

        $this->assertEquals($expected, $buildedQuery);
    }

    /**
     * @covers flowcode\orm\support\DaoSupport::buildUpdateQuery
     */
    public function testBuildUpdateQuery() {
        $weapon = new Weapon(2, "boomerang");

        $expected = "UPDATE `weapon` SET `name`='boomerang' WHERE id='2'";
        $buildedQuery = $this->object->buildUpdateQuery($weapon);

        $this->assertEquals($expected, $buildedQuery);
    }

    public function testbuildRelationQuery_entityWithoutRelations() {
        $weapon = new Weapon(2, "boomerang");

        $expected = "";

        $buildedQuery = $this->object->buildRelationQuery($weapon);

        $this->assertEquals($expected, $buildedQuery);
    }

    public function testBuildRelationQuery_manyToMany_testOk() {
        $ovni = new Ovni();
        $ovni->setId(1);
        $ovni->setName("martian");

        $weapon1 = new Weapon(1, "lazer");
        $weapon2 = new Weapon(2, "rifle");

        $ovni->addWeapon($weapon1);
        $ovni->addWeapon($weapon2);

        $expected = "INSERT INTO ovni_weapon (id_ovni, id_weapon) VALUES ('1', '1');";
        $expected .= "INSERT INTO ovni_weapon (id_ovni, id_weapon) VALUES ('1', '2');";

        $buildedQuery = $this->object->buildRelationQuery($ovni);
        $this->assertEquals($expected, $buildedQuery);
    }

    public function testbuildRelationQuery_entityWithOneToManyRelations() {
        $poll = new Poll(1, "its you?");

        $option1 = new PollOption(2, "yes");
        $option2 = new PollOption(3, "no");

        $poll->addOption($option1);
        $poll->addOption($option2);

        $expected = "INSERT INTO `poll_option` (`name`, `id_poll`) VALUES ('yes', '1');";
        $expected .= "INSERT INTO `poll_option` (`name`, `id_poll`) VALUES ('no', '1');";

        $buildedQuery = $this->object->buildRelationQuery($poll);

        $this->assertEquals($expected, $buildedQuery);
    }
    
    public function testBuildDeleteRelationQuery_manyToMany_testOk(){
        
    }

}

?>
