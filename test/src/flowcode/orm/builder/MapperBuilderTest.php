<?php

namespace flowcode\orm\builder;

use flowcode\demo\domain\Ovni;
use flowcode\orm\builder\MapperBuilder;

/**
 * Test class for MapperBuilder.
 * Generated by PHPUnit on 2012-09-09 at 14:31:20.
 */
class MapperBuilderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MapperBuilder
     */
    protected $object;
    private $mappingFilePath;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new MapperBuilder;
        $this->mappingFilePath = __DIR__ . "/../orm-mapping-test.xml";
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers flowcode\orm\builder\MapperBuilder::buildFromMapping
     */
    public function testBuildFromMapping_noRelations_buildOk() {

        $instance = new Ovni();
        $mapping = simplexml_load_file($this->mappingFilePath);

        $mapper = $this->object->buildFromMapping($mapping, get_class($instance));

        $this->assertEquals(get_class($instance), $mapper->getClass());
        $this->assertEquals("ovni", $mapper->getTable());
    }

    public function testBuildFormMapping_withRelations() {
        $noticia = new \flowcode\inter\domain\Noticia();

        $mappingFilePath = "/var/www/inter/src/flowcode/inter/config/orm-mapping.xml";
        $mapping = simplexml_load_file($mappingFilePath);

        $mapper = $this->object->buildFromMapping($mapping, get_class($noticia));

        $this->assertEquals(get_class($noticia), $mapper->getClass());

        $this->assertEquals(1, count($mapper->getRelations()));
    }

    public function testBuildFromName() {

        $instance = new \flowcode\inter\domain\Noticia();

        $mappingFilePath = "/var/www/inter/src/flowcode/inter/config/orm-mapping.xml";
        $mapping = simplexml_load_file($mappingFilePath);

        $mapper = $this->object->buildFromName($mapping, "noticia");

        $this->assertEquals(get_class($instance), $mapper->getClass());
        $this->assertEquals("noticia", $mapper->getName());
    }

}

?>
