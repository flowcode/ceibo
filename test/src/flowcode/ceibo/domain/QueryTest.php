<?php

namespace flowcode\ceibo\domain;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-16 at 20:55:57.
 */
class QueryTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Query
     */
    protected $object;
    private $ovniMapper;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

        $this->ovniMapper = new Mapper();
        $this->ovniMapper->setClass('flowcode\ceibo\builder\Ovni');
        $this->ovniMapper->setName("ovni");
        $this->ovniMapper->setTable("ovni");

        $dataSource = $this->getMock('flowcode\ceibo\data\PDOMySqlDataSource', array('executeNonQuery', 'executeQuery', 'executeInsert', 'escapeString'));
        $dataSource->expects($this->any())
                ->method('escapeString')
                ->will($this->returnArgument(0));
        $dataSource->expects($this->any())
                ->method('executeInsert')
                ->with($this->equalTo("INSERT INTO `ovni` (`name`) VALUES ('ovni1');"));

        $this->object = new Query($this->ovniMapper, $dataSource);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers flowcode\ceibo\domain\Query::AndWhere
     */
    public function testAndWhere() {
        $this->object->AndWhere("id = :id", array(":id" => 1));
        $this->object->AndWhere("name = :name", array(":name" => 1));
        $this->object->AndWhere("description = :description", array(":description" => 1));

        $this->assertEquals(3, count($this->object->getAndWheres()));
        $this->assertEquals(3, count($this->object->getBindValues()));
        
        $bindValues = $this->object->getBindValues();
        $this->assertEquals(1, $bindValues[":id"]);
    }
    
    /**
     * @covers flowcode\ceibo\domain\Query::orderBy
     */
    public function testOrderBy() {
        $this->object->orderBy("name");
        $this->object->orderBy("name", "DESC");

        $stmt = $this->object->buildStatement();
        $this->assertEquals("SELECT * FROM ovni ORDER BY name ASC, name DESC", $stmt);
    }

    /**
     * @covers flowcode\ceibo\domain\Query::buildStatement
     */
    public function testBuildStatement() {

        $this->object->Where("name = :tag", array(":tag" => "test"));
        $this->object->AndWhere("id = :id", array(":id" => 1));

        $expectedQuery = "SELECT * FROM ovni WHERE name = :tag AND id = :id ";

        $this->assertEquals($expectedQuery, $this->object->buildStatement());
        $this->assertEquals(2, count($this->object->getBindValues()));
    }

}

class Ovni {

    private $id;
    private $name;
    private $weapons;

    public function __construct() {
        $this->weapons = array();
    }

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
    }

    public function getWeapons() {
        return $this->weapons;
    }

    public function setWeapons($weapons) {
        $this->weapons = $weapons;
    }

    public function addWeapon(Weapon $weapon) {
        $this->weapons[] = $weapon;
    }

}
