<?php

namespace flowcode\ceibo\builder;

use flowcode\ceibo\builder\MapperBuilder;

class Ovni {

    private $id;
    private $name;

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
    }

}

class Weapon {

    private $id;
    private $name;

    function __construct() {
        
    }

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
    }

}

/**
 * Test class for MapperBuilder.
 * Generated by PHPUnit on 2012-09-09 at 14:31:20.
 */
class MapperBuilderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MapperBuilder
     */
    protected $object;
    private $mappingFilePath;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new MapperBuilder;
        $this->mappingFilePath = dirname(__FILE__) . "/orm-mapping-test.xml";
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers flowcode\ceibo\builder\MapperBuilder::buildFromMapping
     */
    public function testBuildFromMapping_noRelations_buildOk() {

        $instance = new Ovni();
        $mapping = simplexml_load_file($this->mappingFilePath);

        $mapper = $this->object->buildFromClassName($mapping, get_class($instance));

        $this->assertEquals(get_class($instance), $mapper->getClass());
        $this->assertEquals("ovni", $mapper->getTable());
    }

    public function testBuildFceiboMapping_withRelations() {
        $ovni = new Ovni();

        $mapping = simplexml_load_file($this->mappingFilePath);

        $mapper = $this->object->buildFromClassName($mapping, get_class($ovni));

        $this->assertEquals(get_class($ovni), $mapper->getClass());

        $this->assertEquals(1, count($mapper->getRelations()));
    }

    public function testBuildFromName() {

        $instance = new Weapon(1, "lazer");
        $mapping = simplexml_load_file($this->mappingFilePath);

        $mapper = $this->object->buildFromName($mapping, "weapon");
        $raw = array("id" => 1, "name" => "lazer");
        $this->assertEquals(get_class($instance), $mapper->getClass());
        $this->assertEquals("weapon", $mapper->getName());
        $this->assertNotNull($mapper->createObject($raw));
    }

}

?>
