<?php

namespace flowcode\ceibo\builder;

use flowcode\ceibo\domain\Mapper;
use flowcode\ceibo\domain\Property;
use flowcode\ceibo\domain\Relation;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-12 at 21:09:54.
 */
class QueryBuilderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var QueryBuilder
     */
    protected $object;
    protected $ovniMapper;
    protected $weaponMapper;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new QueryBuilder();

        $this->ovniMapper = new Mapper();
        $this->ovniMapper->setClass('flowcode\ceibo\builder\Ovni');
        $this->ovniMapper->setName("ovni");
        $this->ovniMapper->setTable("ovni");

        $propertys["Id"] = new Property("Id", "id");
        $propertys["Name"] = new Property("Name", "name");
        $this->ovniMapper->setPropertys($propertys);

        $rel = new Relation();
        $rel->setCardinality("many-to-many");
        $rel->setEntity("weapon");
        $rel->setForeignColumn("id_weapon");
        $rel->setLocalColumn("id_ovni");
        $rel->setName("Weapons");
        $rel->setTable("ovni_weapon");
        $relations["Weapons"] = $rel;
        $this->ovniMapper->setRelations($relations);

        $this->weaponMapper = new Mapper();
        $this->weaponMapper->setClass("flowcode\ceibo\builder\Weapon");
        $this->weaponMapper->setName("weapon");
        $this->weaponMapper->setTable("weapon");
        $weaponProperties["Id"] = new Property("Id", "id");
        $weaponProperties["Name"] = new Property("Name", "name");
        $this->weaponMapper->setPropertys($weaponProperties);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers QueryBuilder::buildDeleteQuery
     * @todo   Implement testBuildDeleteQuery().
     */
    public function testBuildDeleteQuery() {
        $ovni = new Ovni();
        $ovni->setId("10");

        $expected = "DELETE FROM `ovni_weapon` WHERE id_ovni = '10';";
        $expected .= "DELETE FROM ovni WHERE id = '10';";

        $deleteQuery = $this->object->getDeleteQuery($ovni, $this->ovniMapper);
        $this->assertEquals($expected, $deleteQuery);
    }

    /**
     * @covers QueryBuilder::buildDeleteRelationQuery
     * @todo   Implement testBuildDeleteRelationQuery().
     */
    public function testBuildDeleteRelationQuery() {
        $rel = new Relation();
        $rel->setCardinality("many-to-many");
        $rel->setEntity("ovni");
        $rel->setForeignColumn("id_ovni");
        $rel->setLocalColumn("id_weapon");
        $rel->setName("Ovnis");
        $rel->setTable("ovni_weapon");

        $ovni = new Ovni();
        $ovni->setId("10");

        $expected = "DELETE FROM `ovni_weapon` WHERE id_weapon = '10';";
        $deleteRelationQuery = $this->object->getDeleteRelationQuery($rel, $ovni);
        $this->assertEquals($expected, $deleteRelationQuery);
    }

    /**
     * @covers QueryBuilder::buildInsertQuery
     * @todo   Implement testBuildInsertQuery().
     */
    public function testBuildInsertQuery() {
        $ovni = new Ovni();
        $ovni->setName("martian");
        $weapon1 = new Weapon(1, "lazer");
        $weapon2 = new Weapon(2, "rifle");
        $ovni->addWeapon($weapon1);
        $ovni->addWeapon($weapon2);

        $expected = "INSERT INTO `ovni` (`name`) VALUES ('martian');";

        $buildedQuery = $this->object->getInsertQuery($ovni, $this->ovniMapper, $this->getDataSouceMock());

        $this->assertEquals($expected, $buildedQuery);
    }

    /**
     * @covers QueryBuilder::buildRelationQuery
     * @todo   Implement testBuildRelationQuery().
     */
    public function testBuildRelationQuery() {
        $ovni = new Ovni();
        $ovni->setId(1);
        $ovni->setName("martian");

        $weapon1 = new Weapon(1, "lazer");
        $weapon2 = new Weapon(2, "rifle");

        $ovni->addWeapon($weapon1);
        $ovni->addWeapon($weapon2);

        $rel = new Relation();
        $rel->setCardinality("many-to-many");
        $rel->setEntity("weapon");
        $rel->setForeignColumn("id_weapon");
        $rel->setLocalColumn("id_ovni");
        $rel->setName("Weapons");
        $rel->setTable("ovni_weapon");

        $expected = "INSERT INTO ovni_weapon (id_ovni, id_weapon) VALUES ('1', '1');";
        $expected .= "INSERT INTO ovni_weapon (id_ovni, id_weapon) VALUES ('1', '2');";

        $buildedQuery = $this->object->getRelationQuery($ovni, $rel);
        $this->assertEquals($expected, $buildedQuery);
    }

    /**
     * @covers QueryBuilder::buildUpdateQuery
     * @todo   Implement testBuildUpdateQuery().
     */
    public function testBuildUpdateQuery() {
        $weapon = new Weapon(2, "boomerang");
        $expected = "UPDATE `weapon` SET `name`='boomerang' WHERE id='2'";
        $buildedQuery = $this->object->getUpdateQuery($weapon, $this->weaponMapper, $this->getDataSouceMock());

        $this->assertEquals($expected, $buildedQuery);
    }

    /**
     * @covers QueryBuilder::buildSelectRelation
     * @todo   Implement testBuildSelectRelation().
     */
    public function testBuildSelectRelation() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * 
     * @return \flowcode\ceibo\data\DataSource $dataSource.
     */
    private function getDataSouceMock() {
        $dataSource = $this->getMock('flowcode\ceibo\data\PDOMySqlDataSource', array('executeNonQuery', 'executeQuery', 'executeInsert', 'escapeString'));
        $dataSource->expects($this->any())
                ->method('escapeString')
                ->will($this->returnArgument(0));
        return $dataSource;
    }

}

class Ovni {

    private $id;
    private $name;
    private $weapons;

    public function __construct() {
        $this->weapons = array();
    }

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
    }

    public function getWeapons() {
        return $this->weapons;
    }

    public function setWeapons($weapons) {
        $this->weapons = $weapons;
    }

    public function addWeapon(Weapon $weapon) {
        $this->weapons[] = $weapon;
    }

}

class Weapon {

    private $id;
    private $name;

    function __construct($id = NULL, $name = NULL) {
        if (!is_null($id))
            $this->id = $id;
        if (!is_null($name))
            $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
    }

}